//We are trying to make sure your passphrase is acceptable! Write a script that asks for an input string that will be used as 
//your passphrase. This input string must have three “words” separated by a space character. Each of these words has specific 
//requirements, listed below.

//You must write a function for each requirement (three total functions) because we will be using unit tests for grading this problem, 
//meaning we will be checking the correctness of your functions individually in addition to checking your overall output. 
//Unit testing is common practice, so it is good to become familiar with the idea of testing independent parts of your code as you develop. 
//Make sure your functions follow the original template provided.

//First Function: For the first word, you must check if it is a palindrome (meaning it is the same forward and backward, like "glolg" 
//or "tacocat"), is case-insensitive (so "GfraaRFg" or "VObov" are valid), and only uses alphabetical letters 
//("tre3ert" and “f^h,@s@,h^f” are not valid).

//Second Function: For the second word, you must check if it is a positive integer with at least 4 digits, containing only numeric 
//characters (i.e. no alphabetic, punctuation, or special characters).

//Third Function: For the third word, you must check if it starts with one of these special characters (“@”, “$”, “%”, “^”, “&”), 
//ends with a punctuation mark (only commas (","), periods ("."), exclamation marks (“!”) and question marks ("?") are allowed), 
//and has three letters in between the special character and punctuation mark (e.g. “@dog!” or “$tpb?” or “^cat,”).

//If the entire password meets all the correct specifications, then print 'valid'; otherwise, print 'invalid'.
//For example, the password "taCocaT 12345 @LAg!" should evaluate to True while the password "blarg 365 oops." should evaluate to False.


# Each of these functions should return a Boolean value, i.e. return True if the
# conditions are satisfied and False otherwise. They should all operate on 
# string inputs. 


# This function checks if the input is a (case-insensitive->doesnt matter if lower case, uppercase etc) palindrome string of 
# only alphabetic characters.
def palindrome(word):
#make whole string lowercase
#check for only letters
#see if word matches by reversing string word[::-1]
#return true if satisfied, otherwise false
    if(word.isalpha()):
        temp = word.lower();
        reversed_word = temp[::-1]
        if(temp == reversed_word):
            return True
    else:
        return False
  
    

# This function checks if the input string is an integer with at least 4 digits.
def integer(word):
#check if only digits (use built in function)
#convert string to int and check if its bigger than 1000 bc its 4 digits
#return true if satisfied, otherwise false
    if(word.isdigit()):
        temp = int(word)
        if(temp > 1000):
            return True
        else:
            return False
    else:
        return False
    

# This function checks if the input starts with 1 special character from the list
# ["@", "$", "%", "^", "&"], then has 3 alphabetical characters, and then ends with
# 1 punctuation character from the list ["!", ",", ".", "?"].
def special(word): 
    list1 = ["@", "$", "%", "^", "&"]
    list2 = ["!", ",", ".", "?"]
    count = 0
    i = 1
    if(len(word) == 5):
        if(word[0] in list1):
            count += 1
        if(word[4] in list2):
            count += 1
        while(i <= 3):
            if(word[i].isalpha()):
                i += 1
                count += 1
            else:
                break
        if(count == 5):
            return True
        else:
            return False
    else: 
        return False
            
#check if starts with 1 charatcer from first list
#check if last character is from second list
#has 3 alphabetical letters in middle in places 1, 2 and 3
#return true if satisfied, otherwise false

# The body of your code goes here (i.e. the part that takes your input, calls the 
# functions from above, and produces the output).
def main():
    #start here
    #x.split(",") is how to split
    #if word is palindrome, integer, or special
    word = input()
    validity = 0
    for word in word.split(" "):
        if(palindrome(word) or integer(word) or special(word)):
            validity += 1
        else:
            validity -= 1
    if(validity == 3):
        print('valid')
    else:
        print('invalid')
    
    return


# Do not modify this code. This makes the unit tests work correctly when main()
# calls for user input. 
if __name__ == "__main__":
    main()